name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Analysis
  security-scan:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit dependencies
        run: npm audit --audit-level moderate

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: tco_calculator_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: tco_calculator_test
          DB_USER: postgres
          DB_PASSWORD: password
        run: |
          npm run db:migrate:test
          npm run db:seed:test

      - name: Run unit tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: tco_calculator_test
          DB_USER: postgres
          DB_PASSWORD: password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
        run: npm run test:unit

      - name: Run integration tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: tco_calculator_test
          DB_USER: postgres
          DB_PASSWORD: password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
        run: npm run test:integration

      - name: Generate test coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Coverage quality gate
        run: |
          COVERAGE=$(npm run test:coverage:check | grep -o '[0-9]*\.[0-9]*' | tail -1)
          echo "Current coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "Coverage $COVERAGE% is below minimum 85%"
            exit 1
          fi

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application stack
        run: |
          docker-compose -f docker-compose.test.yml up -d --build
          # Wait for services to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/

      - name: Stop application stack
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application for load testing
        run: |
          docker-compose up -d --build
          timeout 120 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'

      - name: Run performance tests
        run: npm run test:performance

      - name: Performance quality gate
        run: |
          # Check if performance metrics meet requirements
          node scripts/check-performance-metrics.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/performance/results/

      - name: Stop application
        if: always()
        run: docker-compose down -v

  # Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    permissions:
      contents: read
      packages: write
      
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy container scan - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta-backend.outputs.tags }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Run Trivy container scan - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta-frontend.outputs.tags }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to staging
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment manifests with new image tags
          sed -i "s|IMAGE_TAG_BACKEND|$BACKEND_IMAGE|g" k8s/staging/backend-deployment.yml
          sed -i "s|IMAGE_TAG_FRONTEND|$FRONTEND_IMAGE|g" k8s/staging/frontend-deployment.yml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/tco-backend -n staging
          kubectl rollout status deployment/tco-frontend -n staging

      - name: Run staging health checks
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Health check endpoints
          STAGING_URL="${{ secrets.STAGING_URL }}"
          curl -f "$STAGING_URL/api/health" || exit 1
          curl -f "$STAGING_URL/" || exit 1

      - name: Run staging smoke tests
        run: npm run test:smoke:staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to production
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment manifests with new image tags
          sed -i "s|IMAGE_TAG_BACKEND|$BACKEND_IMAGE|g" k8s/production/backend-deployment.yml
          sed -i "s|IMAGE_TAG_FRONTEND|$FRONTEND_IMAGE|g" k8s/production/frontend-deployment.yml
          
          # Apply Kubernetes manifests with rolling update
          kubectl apply -f k8s/production/
          kubectl rollout status deployment/tco-backend -n production --timeout=600s
          kubectl rollout status deployment/tco-frontend -n production --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for deployment to stabilize
          sleep 60
          
          # Health check endpoints
          PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}"
          curl -f "$PRODUCTION_URL/api/health" || exit 1
          curl -f "$PRODUCTION_URL/" || exit 1

      - name: Run production smoke tests
        run: npm run test:smoke:production

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: '🚀 TCO Calculator deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: '❌ TCO Calculator production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup and Monitoring
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Cleanup old images
        run: |
          # Keep only last 10 images
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/${{ env.IMAGE_NAME }}-backend/versions \
            --jq '.[] | select(.metadata.container.tags | length == 0) | .id' \
            | tail -n +11 \
            | xargs -I {} gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /user/packages/container/${{ env.IMAGE_NAME }}-backend/versions/{}

      - name: Update deployment documentation
        run: |
          echo "Deployment completed at $(date)" >> DEPLOYMENT_LOG.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add DEPLOYMENT_LOG.md
          git commit -m "Update deployment log [skip ci]" || exit 0
          git push

# Quality Gates Configuration
quality-gates:
  test-coverage:
    threshold: 85
  security-vulnerabilities:
    max-high: 0
    max-medium: 5
  performance:
    max-response-time: 2000ms
    min-throughput: 100rps
  code-quality:
    max-complexity: 10
    max-duplication: 5%