version: '3.8'

services:
  # Test database
  postgres-test:
    image: postgres:15-alpine
    container_name: tco-postgres-test
    environment:
      POSTGRES_DB: tco_calculator_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tco_calculator_test"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: tco-redis-test
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Backend for testing
  backend-test:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: tco-backend-test
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    environment:
      NODE_ENV: test
      PORT: 3001
      
      # Database configuration
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: tco_calculator_test
      DB_USER: postgres
      DB_PASSWORD: password
      DB_POOL_MIN: 2
      DB_POOL_MAX: 10
      
      # Redis configuration
      REDIS_URL: redis://redis-test:6379
      
      # Security
      JWT_SECRET: test-secret-key-for-e2e-testing
      JWT_EXPIRES_IN: 1h
      BCRYPT_ROUNDS: 4
      
      # Application settings
      CORS_ORIGIN: http://frontend-test:3000
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 1000
      
      # Monitoring
      LOG_LEVEL: debug
      ENABLE_METRICS: false
    ports:
      - "3001:3001"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Frontend for testing
  frontend-test:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
      args:
        REACT_APP_API_URL: http://localhost:3001
        REACT_APP_ENVIRONMENT: test
    container_name: tco-frontend-test
    depends_on:
      backend-test:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Cypress E2E testing
  cypress:
    image: cypress/included:12.17.4
    container_name: tco-cypress
    depends_on:
      frontend-test:
        condition: service_healthy
    environment:
      CYPRESS_baseUrl: http://frontend-test:3000
      CYPRESS_apiUrl: http://backend-test:3001
    volumes:
      - ./tests/e2e:/e2e
      - ./tests/e2e/screenshots:/e2e/screenshots
      - ./tests/e2e/videos:/e2e/videos
    working_dir: /e2e
    networks:
      - test-network
    profiles:
      - e2e

  # Performance testing with k6
  k6:
    image: grafana/k6:latest
    container_name: tco-k6
    depends_on:
      backend-test:
        condition: service_healthy
    environment:
      K6_WEB_DASHBOARD: "true"
      K6_WEB_DASHBOARD_EXPORT: "/results/performance-report.html"
    volumes:
      - ./tests/performance:/scripts
      - ./tests/performance/results:/results
    command: run --out json=/results/performance.json /scripts/load-test.js
    networks:
      - test-network
    profiles:
      - performance

  # Test database migration runner
  migrate-test:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: tco-migrate-test
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: tco_calculator_test
      DB_USER: postgres
      DB_PASSWORD: password
    volumes:
      - ./packages/backend/src/database:/app/database
    command: ["npm", "run", "db:migrate:test"]
    networks:
      - test-network
    profiles:
      - migration

  # Test data seeder
  seed-test:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: tco-seed-test
    depends_on:
      postgres-test:
        condition: service_healthy
      migrate-test:
        condition: service_completed_successfully
    environment:
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: tco_calculator_test
      DB_USER: postgres
      DB_PASSWORD: password
    volumes:
      - ./packages/backend/src/database:/app/database
    command: ["npm", "run", "db:seed:test"]
    networks:
      - test-network
    profiles:
      - seeding

# Networks
networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16